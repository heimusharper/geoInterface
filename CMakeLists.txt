CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0)
PROJECT(GeoInterface LANGUAGES CXX)
IF(WIN32)
    SET(CMAKE_FIND_LIBRARY_PREFIXES "")
    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
ELSE()
    SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")
ENDIF()
LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -fstrict-aliasing  -Wno-deprecated-declarations -Wno-unused-variable -Wno-volatile")
LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

FIND_PACKAGE(Gdal)
FIND_PACKAGE(Proj)

# add srcs
SET(HEADERS_LIST
    Coords3D.h
    HeightSource.h
    HeightSourceInterface.h
    HeightSourceHGT1M.h
    )

SET(SOURCES_LIST
    Coords3D.cpp
    HeightSource.cpp
    HeightSourceInterface.cpp
    HeightSourceHGT1M.cpp
    )
    
INCLUDE_DIRECTORIES(${Gdal_INCLUDE_DIRS})

ADD_LIBRARY(${PROJECT_NAME} SHARED ${HEADERS_LIST} ${SOURCES_LIST})

TARGET_INCLUDE_DIRECTORIES (${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${Gdal_LIBRARY_DIRS})

install(TARGETS ${PROJECT_NAME} DESTINATION lib)
install(FILES ${HEADERS_LIST} DESTINATION include)
